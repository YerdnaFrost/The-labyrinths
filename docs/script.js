const PAA="12345",PAB="54321",PAC="11111",PAD="22222",PAE="33333",PAF="44444",PAG="55555",PAH="66666",PAI="77777",PAJ="88888",PAK="99999",PAL="00000",PAM="12121",PAN="21212",PAO="23232",PAP="32323",PAQ="45454",PAR="54545",PAS="67676",PAT="76767",PAU="89898",PAV="98989",PAW="10101",PAX="01010",PAY="20202",PAZ="02020",PBA="30303",PBB="03030",PBC="40404",PBD="04040",PBE="50505",PBF="05050",PBG="60606",PBH="06060",PBI="70707",PBJ="07070",PBK="80808",PBL="08080",PBM="90909",PBN="09090",PBO="11223",PBP="22334",PBQ="33445",PBR="44556",PBS="55667",PBT="66778",PBU="77889",PBV="88990",PBW="99001",PBX="00112",PBY="11223",PBZ="22334",PCA="33445",PCB="44556",PCC="55667",PCD="66778",PCE="77889",PCF="88990",PCG="99001",PCH="00112",PCI="11223",PCJ="22334",PCK="33445",PCL="44556",PCM="55667",PCN="66778",PCO="77889",PCP="88990",PCQ="99001",PCR="00112",PCS="11223",PCT="22334",PCU="33445",PCV="44556",PCW="55667",PCX="66778",PCY="77889",PCZ="88990",PDA="99001",PDB="00112",PDC="11223",PDD="22334",PDE="33445",PDF="44556",PDG="55667",PDH="66778",PDI="77889",PDJ="88990",PDK="99001",PDL="00112",PDM="11223",PDN="22334",PDO="33445",PDP="44556",PDQ="55667",PDR="66778",PDS="77889",PDT="88990",PDU="99001",PDV="00112",PDW="11223",PDX="22334",PDY="33445",PDZ="44556",PEA="55667",PEB="66778",PEC="77889",PED="88990",PEE="99001",PEF="00112",PEG="11223",PEH="22334",PEI="33445",PEJ="44556",PEK="55667",PEL="66778",PEM="77889",PEN="88990",PEO="99001",PEP="00112",PEQ="11223",PER="22334",PES="33445",PET="44556",PEU="55667",PEV="66778",PEW="77889",PEX="88990",PEY="99001",PEZ="00112",PFA="11223",PFB="22334",PFC="33445",PFD="44556",PFE="55667",PFF="66778",PFG="77889",PFH="88990",PFI="99001",PFJ="00112",PFK="11223",PFL="22334",PFM="33445",PFN="44556",PFO="55667",PFP="66778",PFQ="77889",PFR="88990",PFS="99001",PFT="00112",PFU="11223",PFV="22334",PFW="33445",PFX="44556",PFY="55667",PFZ="66778",PGA="77889",PGB="88990",PGC="99001",PGD="00112",PGE="11223",PGF="22334",PGG="33445",PGH="44556",PGI="55667",PGJ="66778",PGK="77889",PGL="88990",PGM="99001",PGN="00112",PGO="11223",PGP="22334",PGQ="33445",PGR="44556",PGS="55667",PGT="66778",PGU="77889",PGV="88990",PGW="99001",PGX="00112",PGY="11223",PGZ="22334",PHA="33445",PHB="44556",PHC="55667",PHD="66778",PHE="77889",PHF="88990",PHG="99001",PHH="00112",PHI="11223",PHJ="22334",PHK="33445",PHL="44556",PHM="55667",PHN="66778",PHO="77889",PHP="88990",PHQ="99001",PHR="00112",PHS="11223",PHT="22334",PHU="33445",PHV="44556",PHW="55667",PHX="66778",PHY="77889",PHZ="88990",PIA="99001",PIB="00112",PIC="11223",PID="22334",PIE="33445",PIF="44556",PIG="55667",PIH="66778",PII="77889",PIJ="88990",PIK="99001",PIL="00000";let attempts=0,MAX_ATTEMPTS=5,currentPassword="";function addDigit(e){currentPassword.length<5&&(currentPassword+=e,updatePasswordDisplay(),5===currentPassword.length&&checkPassword())}function deleteDigit(){currentPassword.length>0&&(currentPassword=currentPassword.slice(0,-1),updatePasswordDisplay())}function clearDigits(){currentPassword="",updatePasswordDisplay()}function updatePasswordDisplay(){document.querySelectorAll(".password-digit").forEach((e,t)=>{e.textContent=t<currentPassword.length?currentPassword[t]:"•"})}function checkPassword(){if(currentPassword===PIL)document.getElementById("passwordScreen").style.display="none",document.getElementById("mainScreen").style.display="block",initGame();else if(attempts++,currentPassword="",updatePasswordDisplay(),document.getElementById("passwordError").classList.add("visible"),attempts>=MAX_ATTEMPTS){document.body.innerHTML='<div style="text-align: center; padding: 50px; font-size: 24px; color: #ff4444;">Доступ заблокирован</div>'}}function initPasswordKeyboard(){document.getElementById("numpad").querySelectorAll("[data-digit]").forEach(e=>{e.addEventListener("click",()=>{addDigit(e.getAttribute("data-digit"))})}),document.getElementById("clearButton").addEventListener("click",clearDigits),document.getElementById("deleteButton").addEventListener("click",deleteDigit)}const mazeData=[["010101111110100100","111100010011111110","010111111010101011","010000011110100001","111111001010101011","100011101000111001","110110101101101111","000000101000100010","111111111111101111","010010001101100100","010111100100111101","110000110110000111","011110100011111100","000100111001000101","110110001101110101","010111111100011111","111101100101001001","110100110111111101"],["110111001001101011","010101111101001001","111101010111111101","110001000000100111","100111111111110010","110101000010010111","010001000111010101","111011110001000101","001110111011111100","101000001010001001","111010101111101111","101110100010101001","001011111110001100","111000101011111110","110011100010101011","010110101111101000","110010001001001111","111111111101011010"],["000110100100110101","010010101110100111","110110111011110100","010100100010011111","011111110111001011","110101010001011110","100001011101010011","111101000111111010","010111010101001011","010001011101101010","111011110001001110","100000010101011011","111111111111011110","010001000101110011","111011111100110110","010001010110011100","011111000111110111","110101011100100101"],["011111010101100111","000101110101111101","111101010100100100","000101110111110111","011100010100011100","010111010101110111","110001111100100101","111111010001110111","100011011111000110","111010000101010010","001010101101010111","111011111001010100","101110101011111110","100010001010000010","110111111010101111","010101010011101011","010100010110100010","111110111100111111"],["111001110101111111","101101010100010001","001001011111111011","101111001010001001","111001100010101101","010011111010100111","110110001010111101","010010101110101001","111110101011101111","100010111000001001","110111101110111011","010110000100010000","010100111111111101","111101100001010111","000100101101000100","011111101001011111","110010111101001010","011010010111100011"]];let history=[],currentState=null;function deepCopyState(e){const t={mazes:[]};for(const n of e.mazes){const e={cells:JSON.parse(JSON.stringify(n.cells)),paths:[]};for(const t of n.paths){const n={cells:new Map(t.cells),sources:new Set(t.sources),treasures:new Set(t.treasures),closeCells:new Set(t.closeCells)};e.paths.push(n)}t.mazes.push(e)}return t}function restoreState(e){currentState=deepCopyState(e)}function saveSnapshot(){history.push(deepCopyState(currentState))}function init(){currentState={mazes:[]};for(let e=0;e<mazeData.length;e++){const t=mazeData[e],n=t.length,a=t[0].length,o={cells:[],paths:[]};for(let e=0;e<n;e++){const n=[];for(let a=0;a<a;a++)n.push({isWall:"0"===t[e][a],isPath:"1"===t[e][a]});o.cells.push(n)}for(let e=0;e<n;e++)for(let n=0;n<a;n++)"1"===t[e][n]&&o.paths.push({cells:new Map([[`${n},${e}`,"current"]]),sources:new Set,treasures:new Set,closeCells:new Set});currentState.mazes.push(o)}history=[],renderAllMazes(),updateStats()}function renderAllMazes(){for(let e=0;e<mazeData.length;e++)renderMaze(e)}function getCellColor(e,t,n){const a=currentState.mazes[e].cells[n][t];if(a.isWall)return"wall";const o=`${t},${n}`;let s=!1,i=!1,r=!1,l=!1,d=!1;for(const e of currentState.mazes[e].paths){const t=e.cells.get(o);"current"===t&&(s=!0),e.sources.has(o)&&(i=!0),"visited"===t&&(r=!0),e.treasures.has(o)&&(l=!0),e.closeCells.has(o)&&(d=!0)}return s?"possible":d?"close":l?"treasure":i?"source":r?"visited":"path"}function renderMaze(e){const t=document.getElementById(`maze-${e}`),n=currentState.mazes[e];if(t){t.innerHTML="";const a=n.cells.length,o=n.cells[0].length;t.style.gridTemplateColumns=`repeat(${o}, 10px)`;for(let s=0;s<a;s++)for(let a=0;a<o;a++){const o=document.createElement("div");o.className="cell",o.classList.add(getCellColor(e,a,s)),t.appendChild(o)}}}function updateStats(){let e=0,t=0;for(const n of currentState.mazes){const a=new Set,o=new Set;for(const e of n.paths){for(const[n,t]of e.cells)("visited"===t||"current"===t)&&a.add(n);for(const e of e.sources)a.add(e);for(const e of e.treasures)a.add(e),o.add(e);for(const e of e.closeCells)a.add(e)}e+=a.size,t+=o.size}document.getElementById("cells-passed").textContent=`Пройдено клеток: ${e}`,document.getElementById("treasure-collected").textContent=`Собрано добычи: ${t}`}function move(e){saveSnapshot();let t=0,n=!1;for(let a=0;a<mazeData.length;a++){const o=currentState.mazes[a],s=mazeData[a],i=s.length,r=s[0].length,l=[];for(const d of o.paths){let o,u,c;for(const[e,t]of d.cells)if("current"===t){[o,u]=e.split(",").map(Number),c=e;break}if(void 0!==o&&void 0!==u){let t=o,n=u;switch(e){case"north":n--;break;case"south":n++;break;case"west":t--;break;case"east":t++}t>=0&&t<r&&n>=0&&n<i&&"1"===s[n][t]?l.push({cells:new Map(d.cells),sources:new Set(d.sources),treasures:new Set(d.treasures),closeCells:new Set(d.closeCells)}):n=!0}}o.paths=l,t+=l.length}0===t&&n&&(alert("Вы определённо упёрлись в стену. Возвращаемся к предыдущему состоянию."),undo(),void 0),renderAllMazes(),updateStats()}function setSource(){saveSnapshot();for(let e=0;e<currentState.mazes.length;e++)for(const t of currentState.mazes[e].paths){let e=null;for(const[t,n]of t.cells)"current"===n&&(e=t);e&&t.sources.add(e)}renderAllMazes(),updateStats()}function setTreasure(){saveSnapshot();for(let e=0;e<currentState.mazes.length;e++)for(const t of currentState.mazes[e].paths){let e=null;for(const[t,n]of t.cells)"current"===n&&(e=t);e&&t.treasures.add(e)}renderAllMazes(),updateStats()}function setClose(){saveSnapshot();for(let e=0;e<currentState.mazes.length;e++)for(const t of currentState.mazes[e].paths){let e=null;for(const[t,n]of t.cells)"current"===n&&(e=t);e&&t.closeCells.add(e)}renderAllMazes(),updateStats()}function undo(){history.length>0&&(restoreState(history.pop()),renderAllMazes(),updateStats())}function reset(){history=[],init()}function initGame(){init(),document.getElementById("north").addEventListener("click",()=>{move("north")}),document.getElementById("south").addEventListener("click",()=>{move("south")}),document.getElementById("west").addEventListener("click",()=>{move("west")}),document.getElementById("east").addEventListener("click",()=>{move("east")}),document.getElementById("close").addEventListener("click",setClose),document.getElementById("set-source").addEventListener("click",setSource),document.getElementById("set-treasure").addEventListener("click",setTreasure),document.getElementById("undo").addEventListener("click",undo),document.getElementById("reset").addEventListener("click",reset)}window.onload=function(){document.getElementById("passwordScreen").style.display="flex",document.getElementById("mainScreen").style.display="none",initPasswordKeyboard()};